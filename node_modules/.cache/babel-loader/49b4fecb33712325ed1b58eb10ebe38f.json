{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { types } from 'micromark-util-symbol/types.js';\nimport { ok as assert } from 'uvu/assert';\n/** @type {Construct} */\n\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\n\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n  /** @type {State} */\n\n  function start(code) {\n    assert(markdownLineEnding(code), 'expected eol');\n    effects.enter(types.lineEnding);\n    effects.consume(code);\n    effects.exit(types.lineEnding);\n    return factorySpace(effects, ok, types.linePrefix);\n  }\n}","map":{"version":3,"sources":["D:/com lab/react/keerthana/auth2/AuthInMern/client/node_modules/micromark-core-commonmark/dev/lib/line-ending.js"],"names":["factorySpace","markdownLineEnding","types","ok","assert","lineEnding","name","tokenize","tokenizeLineEnding","effects","start","code","enter","consume","exit","linePrefix"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,YAAR,QAA2B,yBAA3B;AACA,SAAQC,kBAAR,QAAiC,0BAAjC;AACA,SAAQC,KAAR,QAAoB,gCAApB;AACA,SAAQC,EAAE,IAAIC,MAAd,QAA2B,YAA3B;AAEA;;AACA,OAAO,MAAMC,UAAU,GAAG;AAACC,EAAAA,IAAI,EAAE,YAAP;AAAqBC,EAAAA,QAAQ,EAAEC;AAA/B,CAAnB;AAEP;AACA;AACA;AACA;;AACA,SAASA,kBAAT,CAA4BC,OAA5B,EAAqCN,EAArC,EAAyC;AACvC,SAAOO,KAAP;AAEA;;AACA,WAASA,KAAT,CAAeC,IAAf,EAAqB;AACnBP,IAAAA,MAAM,CAACH,kBAAkB,CAACU,IAAD,CAAnB,EAA2B,cAA3B,CAAN;AACAF,IAAAA,OAAO,CAACG,KAAR,CAAcV,KAAK,CAACG,UAApB;AACAI,IAAAA,OAAO,CAACI,OAAR,CAAgBF,IAAhB;AACAF,IAAAA,OAAO,CAACK,IAAR,CAAaZ,KAAK,CAACG,UAAnB;AACA,WAAOL,YAAY,CAACS,OAAD,EAAUN,EAAV,EAAcD,KAAK,CAACa,UAApB,CAAnB;AACD;AACF","sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {types} from 'micromark-util-symbol/types.js'\nimport {ok as assert} from 'uvu/assert'\n\n/** @type {Construct} */\nexport const lineEnding = {name: 'lineEnding', tokenize: tokenizeLineEnding}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(markdownLineEnding(code), 'expected eol')\n    effects.enter(types.lineEnding)\n    effects.consume(code)\n    effects.exit(types.lineEnding)\n    return factorySpace(effects, ok, types.linePrefix)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}