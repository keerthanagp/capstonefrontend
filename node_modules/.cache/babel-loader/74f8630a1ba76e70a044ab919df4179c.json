{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\nimport { asciiControl, markdownLineEndingOrSpace, markdownLineEnding } from 'micromark-util-character';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { constants } from 'micromark-util-symbol/constants.js';\nimport { types } from 'micromark-util-symbol/types.js';\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */\n// eslint-disable-next-line max-params\n\nexport function factoryDestination(effects, ok, nok, type, literalType, literalMarkerType, rawType, stringType, max) {\n  const limit = max || Number.POSITIVE_INFINITY;\n  let balance = 0;\n  return start;\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n\n  function start(code) {\n    if (code === codes.lessThan) {\n      effects.enter(type);\n      effects.enter(literalType);\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      return enclosedBefore;\n    } // ASCII control, space, closing paren.\n\n\n    if (code === codes.eof || code === codes.space || code === codes.rightParenthesis || asciiControl(code)) {\n      return nok(code);\n    }\n\n    effects.enter(type);\n    effects.enter(rawType);\n    effects.enter(stringType);\n    effects.enter(types.chunkString, {\n      contentType: constants.contentTypeString\n    });\n    return raw(code);\n  }\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n\n\n  function enclosedBefore(code) {\n    if (code === codes.greaterThan) {\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      effects.exit(literalType);\n      effects.exit(type);\n      return ok;\n    }\n\n    effects.enter(stringType);\n    effects.enter(types.chunkString, {\n      contentType: constants.contentTypeString\n    });\n    return enclosed(code);\n  }\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n\n\n  function enclosed(code) {\n    if (code === codes.greaterThan) {\n      effects.exit(types.chunkString);\n      effects.exit(stringType);\n      return enclosedBefore(code);\n    }\n\n    if (code === codes.eof || code === codes.lessThan || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    effects.consume(code);\n    return code === codes.backslash ? enclosedEscape : enclosed;\n  }\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n\n\n  function enclosedEscape(code) {\n    if (code === codes.lessThan || code === codes.greaterThan || code === codes.backslash) {\n      effects.consume(code);\n      return enclosed;\n    }\n\n    return enclosed(code);\n  }\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n\n\n  function raw(code) {\n    if (!balance && (code === codes.eof || code === codes.rightParenthesis || markdownLineEndingOrSpace(code))) {\n      effects.exit(types.chunkString);\n      effects.exit(stringType);\n      effects.exit(rawType);\n      effects.exit(type);\n      return ok(code);\n    }\n\n    if (balance < limit && code === codes.leftParenthesis) {\n      effects.consume(code);\n      balance++;\n      return raw;\n    }\n\n    if (code === codes.rightParenthesis) {\n      effects.consume(code);\n      balance--;\n      return raw;\n    } // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesnâ€™t.\n\n\n    if (code === codes.eof || code === codes.space || code === codes.leftParenthesis || asciiControl(code)) {\n      return nok(code);\n    }\n\n    effects.consume(code);\n    return code === codes.backslash ? rawEscape : raw;\n  }\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n\n\n  function rawEscape(code) {\n    if (code === codes.leftParenthesis || code === codes.rightParenthesis || code === codes.backslash) {\n      effects.consume(code);\n      return raw;\n    }\n\n    return raw(code);\n  }\n}","map":{"version":3,"sources":["D:/com lab/react/keerthana/auth2/AuthInMern/client/node_modules/micromark-factory-destination/dev/index.js"],"names":["asciiControl","markdownLineEndingOrSpace","markdownLineEnding","codes","constants","types","factoryDestination","effects","ok","nok","type","literalType","literalMarkerType","rawType","stringType","max","limit","Number","POSITIVE_INFINITY","balance","start","code","lessThan","enter","consume","exit","enclosedBefore","eof","space","rightParenthesis","chunkString","contentType","contentTypeString","raw","greaterThan","enclosed","backslash","enclosedEscape","leftParenthesis","rawEscape"],"mappings":"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","sourcesContent":["/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */\n// eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === codes.lessThan) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (\n      code === codes.eof ||\n      code === codes.space ||\n      code === codes.rightParenthesis ||\n      asciiControl(code)\n    ) {\n      return nok(code)\n    }\n\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === codes.greaterThan) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === codes.greaterThan) {\n      effects.exit(types.chunkString)\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n\n    if (\n      code === codes.eof ||\n      code === codes.lessThan ||\n      markdownLineEnding(code)\n    ) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return code === codes.backslash ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (\n      code === codes.lessThan ||\n      code === codes.greaterThan ||\n      code === codes.backslash\n    ) {\n      effects.consume(code)\n      return enclosed\n    }\n\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === codes.eof ||\n        code === codes.rightParenthesis ||\n        markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit(types.chunkString)\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n\n    if (balance < limit && code === codes.leftParenthesis) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n\n    if (code === codes.rightParenthesis) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesnâ€™t.\n    if (\n      code === codes.eof ||\n      code === codes.space ||\n      code === codes.leftParenthesis ||\n      asciiControl(code)\n    ) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return code === codes.backslash ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (\n      code === codes.leftParenthesis ||\n      code === codes.rightParenthesis ||\n      code === codes.backslash\n    ) {\n      effects.consume(code)\n      return raw\n    }\n\n    return raw(code)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}