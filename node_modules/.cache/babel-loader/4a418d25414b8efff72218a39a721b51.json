{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\nimport { combineExtensions } from 'micromark-util-combine-extensions';\nimport { content } from './initialize/content.js';\nimport { document } from './initialize/document.js';\nimport { flow } from './initialize/flow.js';\nimport { text, string } from './initialize/text.js';\nimport { createTokenizer } from './create-tokenizer.js';\nimport * as defaultConstructs from './constructs.js';\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\n\nexport function parse(options) {\n  const settings = options || {};\n  const constructs =\n  /** @type {FullNormalizedExtension} */\n  combineExtensions([defaultConstructs, ...(settings.extensions || [])]);\n  /** @type {ParseContext} */\n\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  };\n  return parser;\n  /**\n   * @param {InitialConstruct} initial\n   */\n\n  function create(initial) {\n    return creator;\n    /** @type {Create} */\n\n    function creator(from) {\n      return createTokenizer(parser, initial, from);\n    }\n  }\n}","map":{"version":3,"sources":["D:/com lab/react/keerthana/auth2/AuthInMern/client/node_modules/micromark/dev/lib/parse.js"],"names":["combineExtensions","content","document","flow","text","string","createTokenizer","defaultConstructs","parse","options","settings","constructs","extensions","parser","defined","lazy","create","initial","creator","from"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,iBAAR,QAAgC,mCAAhC;AACA,SAAQC,OAAR,QAAsB,yBAAtB;AACA,SAAQC,QAAR,QAAuB,0BAAvB;AACA,SAAQC,IAAR,QAAmB,sBAAnB;AACA,SAAQC,IAAR,EAAcC,MAAd,QAA2B,sBAA3B;AACA,SAAQC,eAAR,QAA8B,uBAA9B;AACA,OAAO,KAAKC,iBAAZ,MAAmC,iBAAnC;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,KAAT,CAAeC,OAAf,EAAwB;AAC7B,QAAMC,QAAQ,GAAGD,OAAO,IAAI,EAA5B;AACA,QAAME,UAAU;AAAG;AACjBX,EAAAA,iBAAiB,CAAC,CAACO,iBAAD,EAAoB,IAAIG,QAAQ,CAACE,UAAT,IAAuB,EAA3B,CAApB,CAAD,CADnB;AAIA;;AACA,QAAMC,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE,EADI;AAEbC,IAAAA,IAAI,EAAE,EAFO;AAGbJ,IAAAA,UAHa;AAIbV,IAAAA,OAAO,EAAEe,MAAM,CAACf,OAAD,CAJF;AAKbC,IAAAA,QAAQ,EAAEc,MAAM,CAACd,QAAD,CALH;AAMbC,IAAAA,IAAI,EAAEa,MAAM,CAACb,IAAD,CANC;AAObE,IAAAA,MAAM,EAAEW,MAAM,CAACX,MAAD,CAPD;AAQbD,IAAAA,IAAI,EAAEY,MAAM,CAACZ,IAAD;AARC,GAAf;AAWA,SAAOS,MAAP;AAEA;AACF;AACA;;AACE,WAASG,MAAT,CAAgBC,OAAhB,EAAyB;AACvB,WAAOC,OAAP;AACA;;AACA,aAASA,OAAT,CAAiBC,IAAjB,EAAuB;AACrB,aAAOb,eAAe,CAACO,MAAD,EAASI,OAAT,EAAkBE,IAAlB,CAAtB;AACD;AACF;AACF","sourcesContent":["/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs = /** @type {FullNormalizedExtension} */ (\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n  )\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}