{"ast":null,"code":"import { codes } from 'micromark-util-symbol/codes.js';\nimport { values } from 'micromark-util-symbol/values.js';\n/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\n\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n\n  if ( // C0 except for HT, LF, FF, CR, space.\n  code < codes.ht || code === codes.vt || code > codes.cr && code < codes.space || // Control character (DEL) of C0, and C1 controls.\n  code > codes.tilde && code < 160 || // Lone high surrogates and low surrogates.\n  code > 55295 && code < 57344 || // Noncharacters.\n  code > 64975 && code < 65008 ||\n  /* eslint-disable no-bitwise */\n  (code & 65535) === 65535 || (code & 65535) === 65534 ||\n  /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1114111) {\n    return values.replacementCharacter;\n  }\n\n  return String.fromCharCode(code);\n}","map":{"version":3,"sources":["D:/com lab/react/keerthana/auth2/AuthInMern/client/node_modules/micromark-util-decode-numeric-character-reference/dev/index.js"],"names":["codes","values","decodeNumericCharacterReference","value","base","code","Number","parseInt","ht","vt","cr","space","tilde","replacementCharacter","String","fromCharCode"],"mappings":"AAAA,SAAQA,KAAR,QAAoB,gCAApB;AACA,SAAQC,MAAR,QAAqB,iCAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,+BAAT,CAAyCC,KAAzC,EAAgDC,IAAhD,EAAsD;AAC3D,QAAMC,IAAI,GAAGC,MAAM,CAACC,QAAP,CAAgBJ,KAAhB,EAAuBC,IAAvB,CAAb;;AAEA,OACE;AACAC,EAAAA,IAAI,GAAGL,KAAK,CAACQ,EAAb,IACAH,IAAI,KAAKL,KAAK,CAACS,EADf,IAECJ,IAAI,GAAGL,KAAK,CAACU,EAAb,IAAmBL,IAAI,GAAGL,KAAK,CAACW,KAFjC,IAGA;AACCN,EAAAA,IAAI,GAAGL,KAAK,CAACY,KAAb,IAAsBP,IAAI,GAAG,GAJ9B,IAKA;AACCA,EAAAA,IAAI,GAAG,KAAP,IAAgBA,IAAI,GAAG,KANxB,IAOA;AACCA,EAAAA,IAAI,GAAG,KAAP,IAAgBA,IAAI,GAAG,KARxB;AASA;AACA,GAACA,IAAI,GAAG,KAAR,MAAmB,KAVnB,IAWA,CAACA,IAAI,GAAG,KAAR,MAAmB,KAXnB;AAYA;AACA;AACAA,EAAAA,IAAI,GAAG,OAhBT,EAiBE;AACA,WAAOJ,MAAM,CAACY,oBAAd;AACD;;AAED,SAAOC,MAAM,CAACC,YAAP,CAAoBV,IAApB,CAAP;AACD","sourcesContent":["import {codes} from 'micromark-util-symbol/codes.js'\nimport {values} from 'micromark-util-symbol/values.js'\n\n/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n\n  if (\n    // C0 except for HT, LF, FF, CR, space.\n    code < codes.ht ||\n    code === codes.vt ||\n    (code > codes.cr && code < codes.space) ||\n    // Control character (DEL) of C0, and C1 controls.\n    (code > codes.tilde && code < 160) ||\n    // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) ||\n    // Noncharacters.\n    (code > 64975 && code < 65008) ||\n    /* eslint-disable no-bitwise */\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 ||\n    /* eslint-enable no-bitwise */\n    // Out of range\n    code > 1114111\n  ) {\n    return values.replacementCharacter\n  }\n\n  return String.fromCharCode(code)\n}\n"]},"metadata":{},"sourceType":"module"}