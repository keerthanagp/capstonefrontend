{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\nimport { asciiPunctuation } from 'micromark-util-character';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { types } from 'micromark-util-symbol/types.js';\nimport { ok as assert } from 'uvu/assert';\n/** @type {Construct} */\n\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\n\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n\n  function start(code) {\n    assert(code === codes.backslash, 'expected `\\\\`');\n    effects.enter(types.characterEscape);\n    effects.enter(types.escapeMarker);\n    effects.consume(code);\n    effects.exit(types.escapeMarker);\n    return inside;\n  }\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n\n\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter(types.characterEscapeValue);\n      effects.consume(code);\n      effects.exit(types.characterEscapeValue);\n      effects.exit(types.characterEscape);\n      return ok;\n    }\n\n    return nok(code);\n  }\n}","map":{"version":3,"sources":["D:/com lab/react/keerthana/auth2/AuthInMern/client/node_modules/micromark-core-commonmark/dev/lib/character-escape.js"],"names":["asciiPunctuation","codes","types","ok","assert","characterEscape","name","tokenize","tokenizeCharacterEscape","effects","nok","start","code","backslash","enter","escapeMarker","consume","exit","inside","characterEscapeValue"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,gBAAR,QAA+B,0BAA/B;AACA,SAAQC,KAAR,QAAoB,gCAApB;AACA,SAAQC,KAAR,QAAoB,gCAApB;AACA,SAAQC,EAAE,IAAIC,MAAd,QAA2B,YAA3B;AAEA;;AACA,OAAO,MAAMC,eAAe,GAAG;AAC7BC,EAAAA,IAAI,EAAE,iBADuB;AAE7BC,EAAAA,QAAQ,EAAEC;AAFmB,CAAxB;AAKP;AACA;AACA;AACA;;AACA,SAASA,uBAAT,CAAiCC,OAAjC,EAA0CN,EAA1C,EAA8CO,GAA9C,EAAmD;AACjD,SAAOC,KAAP;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,WAASA,KAAT,CAAeC,IAAf,EAAqB;AACnBR,IAAAA,MAAM,CAACQ,IAAI,KAAKX,KAAK,CAACY,SAAhB,EAA2B,eAA3B,CAAN;AACAJ,IAAAA,OAAO,CAACK,KAAR,CAAcZ,KAAK,CAACG,eAApB;AACAI,IAAAA,OAAO,CAACK,KAAR,CAAcZ,KAAK,CAACa,YAApB;AACAN,IAAAA,OAAO,CAACO,OAAR,CAAgBJ,IAAhB;AACAH,IAAAA,OAAO,CAACQ,IAAR,CAAaf,KAAK,CAACa,YAAnB;AACA,WAAOG,MAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,WAASA,MAAT,CAAgBN,IAAhB,EAAsB;AACpB;AACA,QAAIZ,gBAAgB,CAACY,IAAD,CAApB,EAA4B;AAC1BH,MAAAA,OAAO,CAACK,KAAR,CAAcZ,KAAK,CAACiB,oBAApB;AACAV,MAAAA,OAAO,CAACO,OAAR,CAAgBJ,IAAhB;AACAH,MAAAA,OAAO,CAACQ,IAAR,CAAaf,KAAK,CAACiB,oBAAnB;AACAV,MAAAA,OAAO,CAACQ,IAAR,CAAaf,KAAK,CAACG,eAAnB;AACA,aAAOF,EAAP;AACD;;AAED,WAAOO,GAAG,CAACE,IAAD,CAAV;AACD;AACF","sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {types} from 'micromark-util-symbol/types.js'\nimport {ok as assert} from 'uvu/assert'\n\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    assert(code === codes.backslash, 'expected `\\\\`')\n    effects.enter(types.characterEscape)\n    effects.enter(types.escapeMarker)\n    effects.consume(code)\n    effects.exit(types.escapeMarker)\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter(types.characterEscapeValue)\n      effects.consume(code)\n      effects.exit(types.characterEscapeValue)\n      effects.exit(types.characterEscape)\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}