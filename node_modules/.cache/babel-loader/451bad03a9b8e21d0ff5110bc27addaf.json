{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { types } from 'micromark-util-symbol/types.js';\nimport { ok as assert } from 'uvu/assert';\nimport { labelEnd } from './label-end.js';\n/** @type {Construct} */\n\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n};\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\n\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n\n  function start(code) {\n    assert(code === codes.leftSquareBracket, 'expected `[`');\n    effects.enter(types.labelLink);\n    effects.enter(types.labelMarker);\n    effects.consume(code);\n    effects.exit(types.labelMarker);\n    effects.exit(types.labelLink);\n    return after;\n  }\n  /** @type {State} */\n\n\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n\n    /* c8 ignore next 3 */\n    return code === codes.caret && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","map":{"version":3,"sources":["D:/com lab/react/keerthana/auth2/AuthInMern/client/node_modules/micromark-core-commonmark/dev/lib/label-start-link.js"],"names":["codes","types","ok","assert","labelEnd","labelStartLink","name","tokenize","tokenizeLabelStartLink","resolveAll","effects","nok","self","start","code","leftSquareBracket","enter","labelLink","labelMarker","consume","exit","after","caret","parser","constructs"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,KAAR,QAAoB,gCAApB;AACA,SAAQC,KAAR,QAAoB,gCAApB;AACA,SAAQC,EAAE,IAAIC,MAAd,QAA2B,YAA3B;AACA,SAAQC,QAAR,QAAuB,gBAAvB;AAEA;;AACA,OAAO,MAAMC,cAAc,GAAG;AAC5BC,EAAAA,IAAI,EAAE,gBADsB;AAE5BC,EAAAA,QAAQ,EAAEC,sBAFkB;AAG5BC,EAAAA,UAAU,EAAEL,QAAQ,CAACK;AAHO,CAAvB;AAMP;AACA;AACA;AACA;;AACA,SAASD,sBAAT,CAAgCE,OAAhC,EAAyCR,EAAzC,EAA6CS,GAA7C,EAAkD;AAChD,QAAMC,IAAI,GAAG,IAAb;AAEA,SAAOC,KAAP;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,WAASA,KAAT,CAAeC,IAAf,EAAqB;AACnBX,IAAAA,MAAM,CAACW,IAAI,KAAKd,KAAK,CAACe,iBAAhB,EAAmC,cAAnC,CAAN;AACAL,IAAAA,OAAO,CAACM,KAAR,CAAcf,KAAK,CAACgB,SAApB;AACAP,IAAAA,OAAO,CAACM,KAAR,CAAcf,KAAK,CAACiB,WAApB;AACAR,IAAAA,OAAO,CAACS,OAAR,CAAgBL,IAAhB;AACAJ,IAAAA,OAAO,CAACU,IAAR,CAAanB,KAAK,CAACiB,WAAnB;AACAR,IAAAA,OAAO,CAACU,IAAR,CAAanB,KAAK,CAACgB,SAAnB;AACA,WAAOI,KAAP;AACD;AAED;;;AACA,WAASA,KAAT,CAAeP,IAAf,EAAqB;AACnB;AACA;AACA;;AACA;AACA,WAAOA,IAAI,KAAKd,KAAK,CAACsB,KAAf,IACL,4BAA4BV,IAAI,CAACW,MAAL,CAAYC,UADnC,GAEHb,GAAG,CAACG,IAAD,CAFA,GAGHZ,EAAE,CAACY,IAAD,CAHN;AAID;AACF","sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {types} from 'micromark-util-symbol/types.js'\nimport {ok as assert} from 'uvu/assert'\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    assert(code === codes.leftSquareBracket, 'expected `[`')\n    effects.enter(types.labelLink)\n    effects.enter(types.labelMarker)\n    effects.consume(code)\n    effects.exit(types.labelMarker)\n    effects.exit(types.labelLink)\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === codes.caret &&\n      '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}