{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { constants } from 'micromark-util-symbol/constants.js';\nimport { types } from 'micromark-util-symbol/types.js';\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */\n// eslint-disable-next-line max-params\n\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n\n  function start(code) {\n    if (code === codes.quotationMark || code === codes.apostrophe || code === codes.leftParenthesis) {\n      effects.enter(type);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      marker = code === codes.leftParenthesis ? codes.rightParenthesis : code;\n      return begin;\n    }\n\n    return nok(code);\n  }\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n\n\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n\n    effects.enter(stringType);\n    return atBreak(code);\n  }\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n\n\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType);\n      return begin(marker);\n    }\n\n    if (code === codes.eof) {\n      return nok(code);\n    } // Note: blank lines can’t exist in content.\n\n\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter(types.lineEnding);\n      effects.consume(code);\n      effects.exit(types.lineEnding);\n      return factorySpace(effects, atBreak, types.linePrefix);\n    }\n\n    effects.enter(types.chunkString, {\n      contentType: constants.contentTypeString\n    });\n    return inside(code);\n  }\n  /**\n   *\n   *\n   * @type {State}\n   */\n\n\n  function inside(code) {\n    if (code === marker || code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.chunkString);\n      return atBreak(code);\n    }\n\n    effects.consume(code);\n    return code === codes.backslash ? escape : inside;\n  }\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n\n\n  function escape(code) {\n    if (code === marker || code === codes.backslash) {\n      effects.consume(code);\n      return inside;\n    }\n\n    return inside(code);\n  }\n}","map":{"version":3,"sources":["D:/com lab/react/keerthana/auth2/AuthInMern/client/node_modules/micromark-factory-title/dev/index.js"],"names":["factorySpace","markdownLineEnding","codes","constants","types","factoryTitle","effects","ok","nok","type","markerType","stringType","marker","start","code","quotationMark","apostrophe","leftParenthesis","enter","consume","exit","rightParenthesis","begin","atBreak","eof","lineEnding","linePrefix","chunkString","contentType","contentTypeString","inside","backslash","escape"],"mappings":"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","sourcesContent":["/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */\n// eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (\n      code === codes.quotationMark ||\n      code === codes.apostrophe ||\n      code === codes.leftParenthesis\n    ) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === codes.leftParenthesis ? codes.rightParenthesis : code\n      return begin\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n\n    if (code === codes.eof) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter(types.lineEnding)\n      effects.consume(code)\n      effects.exit(types.lineEnding)\n      return factorySpace(effects, atBreak, types.linePrefix)\n    }\n\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.chunkString)\n      return atBreak(code)\n    }\n\n    effects.consume(code)\n    return code === codes.backslash ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === codes.backslash) {\n      effects.consume(code)\n      return inside\n    }\n\n    return inside(code)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}