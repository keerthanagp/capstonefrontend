{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factorySpace } from 'micromark-factory-space';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { types } from 'micromark-util-symbol/types.js';\nimport { ok as assert } from 'uvu/assert';\n/** @type {Construct} */\n\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\n/** @type {Construct} */\n\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n};\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\n\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this;\n  /** @type {string} */\n\n  let identifier;\n  return start;\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter(types.definition);\n    return before(code);\n  }\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n\n\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n    assert(code === codes.leftSquareBracket, 'expected `[`');\n    return factoryLabel.call(self, effects, labelAfter, // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, types.definitionLabel, types.definitionLabelMarker, types.definitionLabelString)(code);\n  }\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n\n\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n\n    if (code === codes.colon) {\n      effects.enter(types.definitionMarker);\n      effects.consume(code);\n      effects.exit(types.definitionMarker);\n      return markerAfter;\n    }\n\n    return nok(code);\n  }\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n\n\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);\n  }\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n\n\n  function destinationBefore(code) {\n    return factoryDestination(effects, destinationAfter, // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, types.definitionDestination, types.definitionDestinationLiteral, types.definitionDestinationLiteralMarker, types.definitionDestinationRaw, types.definitionDestinationString)(code);\n  }\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n\n\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code);\n  }\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n\n\n  function after(code) {\n    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, types.whitespace)(code) : afterWhitespace(code);\n  }\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n\n\n  function afterWhitespace(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.definition); // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n\n      self.parser.defined.push(identifier); // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n\n      return ok(code);\n    }\n\n    return nok(code);\n  }\n}\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\n\n\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore;\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);\n  }\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n\n\n  function beforeMarker(code) {\n    return factoryTitle(effects, titleAfter, nok, types.definitionTitle, types.definitionTitleMarker, types.definitionTitleString)(code);\n  }\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n\n\n  function titleAfter(code) {\n    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, types.whitespace)(code) : titleAfterOptionalWhitespace(code);\n  }\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n\n\n  function titleAfterOptionalWhitespace(code) {\n    return code === codes.eof || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","map":{"version":3,"sources":["D:/com lab/react/keerthana/auth2/AuthInMern/client/node_modules/micromark-core-commonmark/dev/lib/definition.js"],"names":["factoryDestination","factoryLabel","factorySpace","factoryTitle","factoryWhitespace","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","normalizeIdentifier","codes","types","ok","assert","definition","name","tokenize","tokenizeDefinition","titleBefore","tokenizeTitleBefore","partial","effects","nok","self","identifier","start","code","enter","before","leftSquareBracket","call","labelAfter","definitionLabel","definitionLabelMarker","definitionLabelString","sliceSerialize","events","length","slice","colon","definitionMarker","consume","exit","markerAfter","destinationBefore","destinationAfter","definitionDestination","definitionDestinationLiteral","definitionDestinationLiteralMarker","definitionDestinationRaw","definitionDestinationString","attempt","after","afterWhitespace","whitespace","eof","parser","defined","push","beforeMarker","titleAfter","definitionTitle","definitionTitleMarker","definitionTitleString","titleAfterOptionalWhitespace"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,kBAAR,QAAiC,+BAAjC;AACA,SAAQC,YAAR,QAA2B,yBAA3B;AACA,SAAQC,YAAR,QAA2B,yBAA3B;AACA,SAAQC,YAAR,QAA2B,yBAA3B;AACA,SAAQC,iBAAR,QAAgC,8BAAhC;AACA,SACEC,kBADF,EAEEC,yBAFF,EAGEC,aAHF,QAIO,0BAJP;AAKA,SAAQC,mBAAR,QAAkC,qCAAlC;AACA,SAAQC,KAAR,QAAoB,gCAApB;AACA,SAAQC,KAAR,QAAoB,gCAApB;AACA,SAAQC,EAAE,IAAIC,MAAd,QAA2B,YAA3B;AAEA;;AACA,OAAO,MAAMC,UAAU,GAAG;AAACC,EAAAA,IAAI,EAAE,YAAP;AAAqBC,EAAAA,QAAQ,EAAEC;AAA/B,CAAnB;AAEP;;AACA,MAAMC,WAAW,GAAG;AAACF,EAAAA,QAAQ,EAAEG,mBAAX;AAAgCC,EAAAA,OAAO,EAAE;AAAzC,CAApB;AAEA;AACA;AACA;AACA;;AACA,SAASH,kBAAT,CAA4BI,OAA5B,EAAqCT,EAArC,EAAyCU,GAAzC,EAA8C;AAC5C,QAAMC,IAAI,GAAG,IAAb;AACA;;AACA,MAAIC,UAAJ;AAEA,SAAOC,KAAP;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,WAASA,KAAT,CAAeC,IAAf,EAAqB;AACnB;AACA;AACA;AACAL,IAAAA,OAAO,CAACM,KAAR,CAAchB,KAAK,CAACG,UAApB;AACA,WAAOc,MAAM,CAACF,IAAD,CAAb;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,WAASE,MAAT,CAAgBF,IAAhB,EAAsB;AACpB;AACAb,IAAAA,MAAM,CAACa,IAAI,KAAKhB,KAAK,CAACmB,iBAAhB,EAAmC,cAAnC,CAAN;AACA,WAAO3B,YAAY,CAAC4B,IAAb,CACLP,IADK,EAELF,OAFK,EAGLU,UAHK,EAIL;AACAT,IAAAA,GALK,EAMLX,KAAK,CAACqB,eAND,EAOLrB,KAAK,CAACsB,qBAPD,EAQLtB,KAAK,CAACuB,qBARD,EASLR,IATK,CAAP;AAUD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,WAASK,UAAT,CAAoBL,IAApB,EAA0B;AACxBF,IAAAA,UAAU,GAAGf,mBAAmB,CAC9Bc,IAAI,CAACY,cAAL,CAAoBZ,IAAI,CAACa,MAAL,CAAYb,IAAI,CAACa,MAAL,CAAYC,MAAZ,GAAqB,CAAjC,EAAoC,CAApC,CAApB,EAA4DC,KAA5D,CAAkE,CAAlE,EAAqE,CAAC,CAAtE,CAD8B,CAAhC;;AAIA,QAAIZ,IAAI,KAAKhB,KAAK,CAAC6B,KAAnB,EAA0B;AACxBlB,MAAAA,OAAO,CAACM,KAAR,CAAchB,KAAK,CAAC6B,gBAApB;AACAnB,MAAAA,OAAO,CAACoB,OAAR,CAAgBf,IAAhB;AACAL,MAAAA,OAAO,CAACqB,IAAR,CAAa/B,KAAK,CAAC6B,gBAAnB;AACA,aAAOG,WAAP;AACD;;AAED,WAAOrB,GAAG,CAACI,IAAD,CAAV;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,WAASiB,WAAT,CAAqBjB,IAArB,EAA2B;AACzB;AACA,WAAOnB,yBAAyB,CAACmB,IAAD,CAAzB,GACHrB,iBAAiB,CAACgB,OAAD,EAAUuB,iBAAV,CAAjB,CAA8ClB,IAA9C,CADG,GAEHkB,iBAAiB,CAAClB,IAAD,CAFrB;AAGD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,WAASkB,iBAAT,CAA2BlB,IAA3B,EAAiC;AAC/B,WAAOzB,kBAAkB,CACvBoB,OADuB,EAEvBwB,gBAFuB,EAGvB;AACAvB,IAAAA,GAJuB,EAKvBX,KAAK,CAACmC,qBALiB,EAMvBnC,KAAK,CAACoC,4BANiB,EAOvBpC,KAAK,CAACqC,kCAPiB,EAQvBrC,KAAK,CAACsC,wBARiB,EASvBtC,KAAK,CAACuC,2BATiB,CAAlB,CAULxB,IAVK,CAAP;AAWD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,WAASmB,gBAAT,CAA0BnB,IAA1B,EAAgC;AAC9B,WAAOL,OAAO,CAAC8B,OAAR,CAAgBjC,WAAhB,EAA6BkC,KAA7B,EAAoCA,KAApC,EAA2C1B,IAA3C,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,WAAS0B,KAAT,CAAe1B,IAAf,EAAqB;AACnB,WAAOlB,aAAa,CAACkB,IAAD,CAAb,GACHvB,YAAY,CAACkB,OAAD,EAAUgC,eAAV,EAA2B1C,KAAK,CAAC2C,UAAjC,CAAZ,CAAyD5B,IAAzD,CADG,GAEH2B,eAAe,CAAC3B,IAAD,CAFnB;AAGD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,WAAS2B,eAAT,CAAyB3B,IAAzB,EAA+B;AAC7B,QAAIA,IAAI,KAAKhB,KAAK,CAAC6C,GAAf,IAAsBjD,kBAAkB,CAACoB,IAAD,CAA5C,EAAoD;AAClDL,MAAAA,OAAO,CAACqB,IAAR,CAAa/B,KAAK,CAACG,UAAnB,EADkD,CAGlD;AACA;AACA;;AACAS,MAAAA,IAAI,CAACiC,MAAL,CAAYC,OAAZ,CAAoBC,IAApB,CAAyBlC,UAAzB,EANkD,CAQlD;AACA;AACA;;AACA,aAAOZ,EAAE,CAACc,IAAD,CAAT;AACD;;AAED,WAAOJ,GAAG,CAACI,IAAD,CAAV;AACD;AACF;AAED;AACA;AACA;AACA;;;AACA,SAASP,mBAAT,CAA6BE,OAA7B,EAAsCT,EAAtC,EAA0CU,GAA1C,EAA+C;AAC7C,SAAOJ,WAAP;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,WAASA,WAAT,CAAqBQ,IAArB,EAA2B;AACzB,WAAOnB,yBAAyB,CAACmB,IAAD,CAAzB,GACHrB,iBAAiB,CAACgB,OAAD,EAAUsC,YAAV,CAAjB,CAAyCjC,IAAzC,CADG,GAEHJ,GAAG,CAACI,IAAD,CAFP;AAGD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,WAASiC,YAAT,CAAsBjC,IAAtB,EAA4B;AAC1B,WAAOtB,YAAY,CACjBiB,OADiB,EAEjBuC,UAFiB,EAGjBtC,GAHiB,EAIjBX,KAAK,CAACkD,eAJW,EAKjBlD,KAAK,CAACmD,qBALW,EAMjBnD,KAAK,CAACoD,qBANW,CAAZ,CAOLrC,IAPK,CAAP;AAQD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,WAASkC,UAAT,CAAoBlC,IAApB,EAA0B;AACxB,WAAOlB,aAAa,CAACkB,IAAD,CAAb,GACHvB,YAAY,CACVkB,OADU,EAEV2C,4BAFU,EAGVrD,KAAK,CAAC2C,UAHI,CAAZ,CAIE5B,IAJF,CADG,GAMHsC,4BAA4B,CAACtC,IAAD,CANhC;AAOD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,WAASsC,4BAAT,CAAsCtC,IAAtC,EAA4C;AAC1C,WAAOA,IAAI,KAAKhB,KAAK,CAAC6C,GAAf,IAAsBjD,kBAAkB,CAACoB,IAAD,CAAxC,GAAiDd,EAAE,CAACc,IAAD,CAAnD,GAA4DJ,GAAG,CAACI,IAAD,CAAtE;AACD;AACF","sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {types} from 'micromark-util-symbol/types.js'\nimport {ok as assert} from 'uvu/assert'\n\n/** @type {Construct} */\nexport const definition = {name: 'definition', tokenize: tokenizeDefinition}\n\n/** @type {Construct} */\nconst titleBefore = {tokenize: tokenizeTitleBefore, partial: true}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter(types.definition)\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n    assert(code === codes.leftSquareBracket, 'expected `[`')\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      types.definitionLabel,\n      types.definitionLabelMarker,\n      types.definitionLabelString\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n\n    if (code === codes.colon) {\n      effects.enter(types.definitionMarker)\n      effects.consume(code)\n      effects.exit(types.definitionMarker)\n      return markerAfter\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      types.definitionDestination,\n      types.definitionDestinationLiteral,\n      types.definitionDestinationLiteralMarker,\n      types.definitionDestinationRaw,\n      types.definitionDestinationString\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, types.whitespace)(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.definition)\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      types.definitionTitle,\n      types.definitionTitleMarker,\n      types.definitionTitleString\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          titleAfterOptionalWhitespace,\n          types.whitespace\n        )(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === codes.eof || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}