{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { constants } from 'micromark-util-symbol/constants.js';\nimport { types } from 'micromark-util-symbol/types.js';\nimport { ok as assert } from 'uvu/assert';\n/** @type {Construct} */\n\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n/** @type {Construct} */\n\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n};\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\n\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n    assert(markdownSpace(code));\n    effects.enter(types.codeIndented); // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n\n    return factorySpace(effects, afterPrefix, types.linePrefix, constants.tabSize + 1)(code);\n  }\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === types.linePrefix && tail[2].sliceSerialize(tail[1], true).length >= constants.tabSize ? atBreak(code) : nok(code);\n  }\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n\n\n  function atBreak(code) {\n    if (code === codes.eof) {\n      return after(code);\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n\n    effects.enter(types.codeFlowValue);\n    return inside(code);\n  }\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n\n\n  function inside(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.codeFlowValue);\n      return atBreak(code);\n    }\n\n    effects.consume(code);\n    return inside;\n  }\n  /** @type {State} */\n\n\n  function after(code) {\n    effects.exit(types.codeIndented); // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n\n    return ok(code);\n  }\n}\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\n\n\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart;\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter(types.lineEnding);\n      effects.consume(code);\n      effects.exit(types.lineEnding);\n      return furtherStart;\n    } // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n\n\n    return factorySpace(effects, afterPrefix, types.linePrefix, constants.tabSize + 1)(code);\n  }\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === types.linePrefix && tail[2].sliceSerialize(tail[1], true).length >= constants.tabSize ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\n  }\n}","map":{"version":3,"sources":["D:/com lab/react/keerthana/auth2/AuthInMern/client/node_modules/micromark-core-commonmark/dev/lib/code-indented.js"],"names":["factorySpace","markdownLineEnding","markdownSpace","codes","constants","types","ok","assert","codeIndented","name","tokenize","tokenizeCodeIndented","furtherStart","tokenizeFurtherStart","partial","effects","nok","self","start","code","enter","afterPrefix","linePrefix","tabSize","tail","events","length","type","sliceSerialize","atBreak","eof","after","attempt","codeFlowValue","inside","exit","consume","parser","lazy","now","line","lineEnding"],"mappings":"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","sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\nimport {ok as assert} from 'uvu/assert'\n\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {tokenize: tokenizeFurtherStart, partial: true}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n    assert(markdownSpace(code))\n    effects.enter(types.codeIndented)\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(\n      effects,\n      afterPrefix,\n      types.linePrefix,\n      constants.tabSize + 1\n    )(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === types.linePrefix &&\n      tail[2].sliceSerialize(tail[1], true).length >= constants.tabSize\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === codes.eof) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n\n    effects.enter(types.codeFlowValue)\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.codeFlowValue)\n      return atBreak(code)\n    }\n\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(types.codeIndented)\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter(types.lineEnding)\n      effects.consume(code)\n      effects.exit(types.lineEnding)\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(\n      effects,\n      afterPrefix,\n      types.linePrefix,\n      constants.tabSize + 1\n    )(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === types.linePrefix &&\n      tail[2].sliceSerialize(tail[1], true).length >= constants.tabSize\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}