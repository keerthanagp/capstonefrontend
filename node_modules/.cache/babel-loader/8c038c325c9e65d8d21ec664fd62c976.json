{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\nimport { asciiAlpha, asciiAlphanumeric, asciiAtext, asciiControl } from 'micromark-util-character';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { constants } from 'micromark-util-symbol/constants.js';\nimport { types } from 'micromark-util-symbol/types.js';\nimport { ok as assert } from 'uvu/assert';\n/** @type {Construct} */\n\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\n\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0;\n  return start;\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n\n  function start(code) {\n    assert(code === codes.lessThan, 'expected `<`');\n    effects.enter(types.autolink);\n    effects.enter(types.autolinkMarker);\n    effects.consume(code);\n    effects.exit(types.autolinkMarker);\n    effects.enter(types.autolinkProtocol);\n    return open;\n  }\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n\n\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n\n    return emailAtext(code);\n  }\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n\n\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === codes.plusSign || code === codes.dash || code === codes.dot || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n\n    return emailAtext(code);\n  }\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n\n\n  function schemeInsideOrEmailAtext(code) {\n    if (code === codes.colon) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    } // ASCII alphanumeric and `+`, `-`, and `.`.\n\n\n    if ((code === codes.plusSign || code === codes.dash || code === codes.dot || asciiAlphanumeric(code)) && size++ < constants.autolinkSchemeSizeMax) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n\n    size = 0;\n    return emailAtext(code);\n  }\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n\n\n  function urlInside(code) {\n    if (code === codes.greaterThan) {\n      effects.exit(types.autolinkProtocol);\n      effects.enter(types.autolinkMarker);\n      effects.consume(code);\n      effects.exit(types.autolinkMarker);\n      effects.exit(types.autolink);\n      return ok;\n    } // ASCII control, space, or `<`.\n\n\n    if (code === codes.eof || code === codes.space || code === codes.lessThan || asciiControl(code)) {\n      return nok(code);\n    }\n\n    effects.consume(code);\n    return urlInside;\n  }\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n\n\n  function emailAtext(code) {\n    if (code === codes.atSign) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n\n    return nok(code);\n  }\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n\n\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n\n\n  function emailLabel(code) {\n    if (code === codes.dot) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n\n    if (code === codes.greaterThan) {\n      // Exit, then change the token type.\n      effects.exit(types.autolinkProtocol).type = types.autolinkEmail;\n      effects.enter(types.autolinkMarker);\n      effects.consume(code);\n      effects.exit(types.autolinkMarker);\n      effects.exit(types.autolink);\n      return ok;\n    }\n\n    return emailValue(code);\n  }\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n\n\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === codes.dash || asciiAlphanumeric(code)) && size++ < constants.autolinkDomainSizeMax) {\n      const next = code === codes.dash ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n\n    return nok(code);\n  }\n}","map":{"version":3,"sources":["D:/com lab/react/keerthana/auth2/AuthInMern/client/node_modules/micromark-core-commonmark/dev/lib/autolink.js"],"names":["asciiAlpha","asciiAlphanumeric","asciiAtext","asciiControl","codes","constants","types","ok","assert","autolink","name","tokenize","tokenizeAutolink","effects","nok","size","start","code","lessThan","enter","autolinkMarker","consume","exit","autolinkProtocol","open","schemeOrEmailAtext","emailAtext","plusSign","dash","dot","schemeInsideOrEmailAtext","colon","urlInside","autolinkSchemeSizeMax","greaterThan","eof","space","atSign","emailAtSignOrDot","emailLabel","type","autolinkEmail","emailValue","autolinkDomainSizeMax","next"],"mappings":"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","sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\nimport {ok as assert} from 'uvu/assert'\n\n/** @type {Construct} */\nexport const autolink = {name: 'autolink', tokenize: tokenizeAutolink}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    assert(code === codes.lessThan, 'expected `<`')\n    effects.enter(types.autolink)\n    effects.enter(types.autolinkMarker)\n    effects.consume(code)\n    effects.exit(types.autolinkMarker)\n    effects.enter(types.autolinkProtocol)\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      code === codes.plusSign ||\n      code === codes.dash ||\n      code === codes.dot ||\n      asciiAlphanumeric(code)\n    ) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === codes.colon) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === codes.plusSign ||\n        code === codes.dash ||\n        code === codes.dot ||\n        asciiAlphanumeric(code)) &&\n      size++ < constants.autolinkSchemeSizeMax\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === codes.greaterThan) {\n      effects.exit(types.autolinkProtocol)\n      effects.enter(types.autolinkMarker)\n      effects.consume(code)\n      effects.exit(types.autolinkMarker)\n      effects.exit(types.autolink)\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (\n      code === codes.eof ||\n      code === codes.space ||\n      code === codes.lessThan ||\n      asciiControl(code)\n    ) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === codes.atSign) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === codes.dot) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (code === codes.greaterThan) {\n      // Exit, then change the token type.\n      effects.exit(types.autolinkProtocol).type = types.autolinkEmail\n      effects.enter(types.autolinkMarker)\n      effects.consume(code)\n      effects.exit(types.autolinkMarker)\n      effects.exit(types.autolink)\n      return ok\n    }\n\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if (\n      (code === codes.dash || asciiAlphanumeric(code)) &&\n      size++ < constants.autolinkDomainSizeMax\n    ) {\n      const next = code === codes.dash ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n\n    return nok(code)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}