{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { constants } from 'micromark-util-symbol/constants.js';\nimport { types } from 'micromark-util-symbol/types.js';\nimport { ok as assert } from 'uvu/assert';\n/**\n * Parse labels.\n *\n * > ðŸ‘‰ **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */\n// eslint-disable-next-line max-params\n\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this;\n  let size = 0;\n  /** @type {boolean} */\n\n  let seen;\n  return start;\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n\n  function start(code) {\n    assert(code === codes.leftSquareBracket, 'expected `[`');\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    effects.enter(stringType);\n    return atBreak;\n  }\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n\n\n  function atBreak(code) {\n    if (size > constants.linkReferenceSizeMax || code === codes.eof || code === codes.leftSquareBracket || code === codes.rightSquareBracket && !seen || // To do: remove in the future once weâ€™ve switched from\n    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n    // which doesnâ€™t need this.\n    // Hidden footnotes hook.\n\n    /* c8 ignore next 3 */\n    code === codes.caret && !size && '_hiddenFootnoteSupport' in self.parser.constructs) {\n      return nok(code);\n    }\n\n    if (code === codes.rightSquareBracket) {\n      effects.exit(stringType);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    } // To do: indent? Link chunks and EOLs together?\n\n\n    if (markdownLineEnding(code)) {\n      effects.enter(types.lineEnding);\n      effects.consume(code);\n      effects.exit(types.lineEnding);\n      return atBreak;\n    }\n\n    effects.enter(types.chunkString, {\n      contentType: constants.contentTypeString\n    });\n    return labelInside(code);\n  }\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n\n\n  function labelInside(code) {\n    if (code === codes.eof || code === codes.leftSquareBracket || code === codes.rightSquareBracket || markdownLineEnding(code) || size++ > constants.linkReferenceSizeMax) {\n      effects.exit(types.chunkString);\n      return atBreak(code);\n    }\n\n    effects.consume(code);\n    if (!seen) seen = !markdownSpace(code);\n    return code === codes.backslash ? labelEscape : labelInside;\n  }\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n\n\n  function labelEscape(code) {\n    if (code === codes.leftSquareBracket || code === codes.backslash || code === codes.rightSquareBracket) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n\n    return labelInside(code);\n  }\n}","map":{"version":3,"sources":["D:/com lab/react/keerthana/auth2/AuthInMern/client/node_modules/micromark-factory-label/dev/index.js"],"names":["markdownLineEnding","markdownSpace","codes","constants","types","ok","assert","factoryLabel","effects","nok","type","markerType","stringType","self","size","seen","start","code","leftSquareBracket","enter","consume","exit","atBreak","linkReferenceSizeMax","eof","rightSquareBracket","caret","parser","constructs","lineEnding","chunkString","contentType","contentTypeString","labelInside","backslash","labelEscape"],"mappings":"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","sourcesContent":["/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\nimport {ok as assert} from 'uvu/assert'\n\n/**\n * Parse labels.\n *\n * > ðŸ‘‰ **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */\n// eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    assert(code === codes.leftSquareBracket, 'expected `[`')\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > constants.linkReferenceSizeMax ||\n      code === codes.eof ||\n      code === codes.leftSquareBracket ||\n      (code === codes.rightSquareBracket && !seen) ||\n      // To do: remove in the future once weâ€™ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesnâ€™t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === codes.caret &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n\n    if (code === codes.rightSquareBracket) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter(types.lineEnding)\n      effects.consume(code)\n      effects.exit(types.lineEnding)\n      return atBreak\n    }\n\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === codes.eof ||\n      code === codes.leftSquareBracket ||\n      code === codes.rightSquareBracket ||\n      markdownLineEnding(code) ||\n      size++ > constants.linkReferenceSizeMax\n    ) {\n      effects.exit(types.chunkString)\n      return atBreak(code)\n    }\n\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === codes.backslash ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (\n      code === codes.leftSquareBracket ||\n      code === codes.backslash ||\n      code === codes.rightSquareBracket\n    ) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n\n    return labelInside(code)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}