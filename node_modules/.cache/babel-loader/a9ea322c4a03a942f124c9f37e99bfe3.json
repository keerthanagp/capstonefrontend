{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { constants } from 'micromark-util-symbol/constants.js';\nimport { types } from 'micromark-util-symbol/types.js';\nimport { ok as assert } from 'uvu/assert';\n/** @type {Construct} */\n\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\n\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n\n  let marker;\n  return start;\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n\n  function start(code) {\n    effects.enter(types.thematicBreak); // To do: parse indent like `markdown-rs`.\n\n    return before(code);\n  }\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n\n\n  function before(code) {\n    assert(code === codes.asterisk || code === codes.dash || code === codes.underscore, 'expected `*`, `-`, or `_`');\n    marker = code;\n    return atBreak(code);\n  }\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n\n\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(types.thematicBreakSequence);\n      return sequence(code);\n    }\n\n    if (size >= constants.thematicBreakMarkerCountMin && (code === codes.eof || markdownLineEnding(code))) {\n      effects.exit(types.thematicBreak);\n      return ok(code);\n    }\n\n    return nok(code);\n  }\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n\n    effects.exit(types.thematicBreakSequence);\n    return markdownSpace(code) ? factorySpace(effects, atBreak, types.whitespace)(code) : atBreak(code);\n  }\n}","map":{"version":3,"sources":["D:/com lab/react/keerthana/auth2/AuthInMern/client/node_modules/micromark-core-commonmark/dev/lib/thematic-break.js"],"names":["factorySpace","markdownLineEnding","markdownSpace","codes","constants","types","ok","assert","thematicBreak","name","tokenize","tokenizeThematicBreak","effects","nok","size","marker","start","code","enter","before","asterisk","dash","underscore","atBreak","thematicBreakSequence","sequence","thematicBreakMarkerCountMin","eof","exit","consume","whitespace"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,YAAR,QAA2B,yBAA3B;AACA,SAAQC,kBAAR,EAA4BC,aAA5B,QAAgD,0BAAhD;AACA,SAAQC,KAAR,QAAoB,gCAApB;AACA,SAAQC,SAAR,QAAwB,oCAAxB;AACA,SAAQC,KAAR,QAAoB,gCAApB;AACA,SAAQC,EAAE,IAAIC,MAAd,QAA2B,YAA3B;AAEA;;AACA,OAAO,MAAMC,aAAa,GAAG;AAC3BC,EAAAA,IAAI,EAAE,eADqB;AAE3BC,EAAAA,QAAQ,EAAEC;AAFiB,CAAtB;AAKP;AACA;AACA;AACA;;AACA,SAASA,qBAAT,CAA+BC,OAA/B,EAAwCN,EAAxC,EAA4CO,GAA5C,EAAiD;AAC/C,MAAIC,IAAI,GAAG,CAAX;AACA;;AACA,MAAIC,MAAJ;AAEA,SAAOC,KAAP;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,WAASA,KAAT,CAAeC,IAAf,EAAqB;AACnBL,IAAAA,OAAO,CAACM,KAAR,CAAcb,KAAK,CAACG,aAApB,EADmB,CAEnB;;AACA,WAAOW,MAAM,CAACF,IAAD,CAAb;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,WAASE,MAAT,CAAgBF,IAAhB,EAAsB;AACpBV,IAAAA,MAAM,CACJU,IAAI,KAAKd,KAAK,CAACiB,QAAf,IACEH,IAAI,KAAKd,KAAK,CAACkB,IADjB,IAEEJ,IAAI,KAAKd,KAAK,CAACmB,UAHb,EAIJ,2BAJI,CAAN;AAMAP,IAAAA,MAAM,GAAGE,IAAT;AACA,WAAOM,OAAO,CAACN,IAAD,CAAd;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,WAASM,OAAT,CAAiBN,IAAjB,EAAuB;AACrB,QAAIA,IAAI,KAAKF,MAAb,EAAqB;AACnBH,MAAAA,OAAO,CAACM,KAAR,CAAcb,KAAK,CAACmB,qBAApB;AACA,aAAOC,QAAQ,CAACR,IAAD,CAAf;AACD;;AAED,QACEH,IAAI,IAAIV,SAAS,CAACsB,2BAAlB,KACCT,IAAI,KAAKd,KAAK,CAACwB,GAAf,IAAsB1B,kBAAkB,CAACgB,IAAD,CADzC,CADF,EAGE;AACAL,MAAAA,OAAO,CAACgB,IAAR,CAAavB,KAAK,CAACG,aAAnB;AACA,aAAOF,EAAE,CAACW,IAAD,CAAT;AACD;;AAED,WAAOJ,GAAG,CAACI,IAAD,CAAV;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,WAASQ,QAAT,CAAkBR,IAAlB,EAAwB;AACtB,QAAIA,IAAI,KAAKF,MAAb,EAAqB;AACnBH,MAAAA,OAAO,CAACiB,OAAR,CAAgBZ,IAAhB;AACAH,MAAAA,IAAI;AACJ,aAAOW,QAAP;AACD;;AAEDb,IAAAA,OAAO,CAACgB,IAAR,CAAavB,KAAK,CAACmB,qBAAnB;AACA,WAAOtB,aAAa,CAACe,IAAD,CAAb,GACHjB,YAAY,CAACY,OAAD,EAAUW,OAAV,EAAmBlB,KAAK,CAACyB,UAAzB,CAAZ,CAAiDb,IAAjD,CADG,GAEHM,OAAO,CAACN,IAAD,CAFX;AAGD;AACF","sourcesContent":["/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\nimport {ok as assert} from 'uvu/assert'\n\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(types.thematicBreak)\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    assert(\n      code === codes.asterisk ||\n        code === codes.dash ||\n        code === codes.underscore,\n      'expected `*`, `-`, or `_`'\n    )\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(types.thematicBreakSequence)\n      return sequence(code)\n    }\n\n    if (\n      size >= constants.thematicBreakMarkerCountMin &&\n      (code === codes.eof || markdownLineEnding(code))\n    ) {\n      effects.exit(types.thematicBreak)\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n\n    effects.exit(types.thematicBreakSequence)\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, types.whitespace)(code)\n      : atBreak(code)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}